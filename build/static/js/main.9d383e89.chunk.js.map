{"version":3,"sources":["containers/Demo/Demo.js","containers/Main.js","App.js","serviceWorker.js","index.js"],"names":["Demo","props","useState","registerUsername","setRegisterUsername","registerPassword","setRegisterPassword","loginUsername","setLoginUsername","loginPassword","setLoginPassword","show","msg","registerMsg","setRegisterMsg","loginMsg","setLoginMsg","protectedRequestMsg","setProtectedRequestMsg","msgStyle","Fragment","Container","Row","className","Col","xs","Form","Group","controlId","Label","Control","type","placeholder","value","onChange","event","target","Button","variant","onClick","e","preventDefault","registrationData","axios","post","then","resp","console","log","data","catch","err","response","style","loginData","jwtClaims","token","base64","split","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","JSON","parse","parseJwt","document","cookie","config","headers","jwt","name","parts","length","pop","shift","getCookie","get","main","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","App","Main","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9d383e89.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {Container, Row, Col, Form, Button} from 'react-bootstrap';\nimport axios from 'axios';\n\nfunction parseJwt (token) {\n    var base64Url = token.split('.')[1];\n    var base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    var jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {\n        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);\n    }).join(''));\n\n    return JSON.parse(jsonPayload);\n};\n\nfunction getCookie(name) {\n    var value = \"; \" + document.cookie;\n    var parts = value.split(\"; \" + name + \"=\");\n    if (parts.length === 2) return parts.pop().split(\";\").shift();\n  }\n\nconst Demo = (props) => {\n    const [registerUsername, setRegisterUsername] = useState('');\n    const [registerPassword, setRegisterPassword] = useState('');\n    const [loginUsername, setLoginUsername] = useState('');\n    const [loginPassword, setLoginPassword] = useState('');\n    const [registerMsg, setRegisterMsg] = useState({show:false, msg:''});\n    const [loginMsg, setLoginMsg] = useState({show:false, msg:''});\n    const [protectedRequestMsg, setProtectedRequestMsg] = useState({show:false, msg:''});\n\n    const msgStyle = {\n        \"color\":\"red\"\n    };\n\n    const registerAccount = (e) => {\n        e.preventDefault();\n\n       let registrationData = {\n           \"username\": registerUsername,\n           \"password\": registerPassword\n       }\n\n       axios.post(\"/api/account/register\", registrationData)\n        .then((resp) => {\n            console.log(resp);\n            setRegisterMsg({\n                \"show\":true,\n                \"msg\":resp.data\n            });\n        })\n        .catch((err) => {\n            console.log(err);\n            setRegisterMsg({\n                \"show\":true,\n                \"msg\":err.response.data\n            });\n        })\n    }\n\n    const login = (e) => {\n        e.preventDefault();\n\n        let loginData = {\n            \"username\":loginUsername,\n            \"password\":loginPassword\n        }\n\n        axios.post(\"/api/account/login\", loginData)\n            .then((resp) => {\n                let jwtClaims = parseJwt(resp.data);\n                setLoginMsg({\n                    show:true,\n                    msg:`Login Successful, JWT expires at ${jwtClaims['ExpiresAt']}`\n                })\n                document.cookie = `jwt=${resp.data}`;\n            })\n            .catch((err) => {\n                setLoginMsg({\n                    show:true,\n                    msg:err.response.data\n                });\n            })\n    }\n\n    const protectedRequest = (e) => {\n        e.preventDefault();\n\n        let jwt = getCookie(\"jwt\");\n\n        let config = {\n            headers: {\n                jwt: jwt,\n                'Access-Control-Allow-Origin': '*'\n            }\n        }\n\n        axios.get(\"/api/account/protected_page\", config)\n            .then((resp) => {\n                console.log(resp);\n                setProtectedRequestMsg({\n                    show:true,\n                    msg:resp.data\n                });\n            })\n            .catch((err) => {\n                console.log(err.response);\n                setProtectedRequestMsg({\n                    show:true,\n                    msg:err.response.data\n                });\n            })\n    }\n\n    const logout = (e) => {\n        e.preventDefault();\n\n        document.cookie = \"jwt=;expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;\";\n\n        setProtectedRequestMsg({\n            show:true,\n            msg:\"You are logged out\"\n        })\n    }\n\n    return (\n        <React.Fragment>\n            <Container>\n                <Row className=\"mt-4\">\n                        <Col xs={12}>\n                            <h2>Working Demo</h2>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} className=\"mt-2\">\n                            <h4>Register</h4>\n                            <p>\n                                To begin with the demo, you need to register an account first.\n                                You can use fake details.\n                            </p>\n                            <Form>\n                                <Form.Group controlId=\"registerEmail\">\n                                    <Form.Label>Username</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"Enter username\"\n                                    value={registerUsername}\n                                    onChange={(event) => setRegisterUsername(event.target.value)} />\n                                </Form.Group>\n\n                                <Form.Group controlId=\"registerPassword\">\n                                    <Form.Label>Password</Form.Label>\n                                    <Form.Control type=\"password\" placeholder=\"Password\" \n                                    value={registerPassword}\n                                    onChange={(event) => setRegisterPassword(event.target.value)}/>\n                                </Form.Group>\n                                <Button variant=\"primary\" type=\"submit\"\n                                onClick={registerAccount}>\n                                    Register\n                                </Button>\n                                <Form.Group>\n                                {registerMsg.show ? <label style={msgStyle}>{registerMsg.msg}</label> : null}\n                                </Form.Group>\n                            </Form>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} className=\"mt-4\">\n                            <h4>Login</h4>\n                            <p>\n                                Enter the email and password that you registered before.\n                                The server will send you a JWT, and it will be stored in your browser's cookie.\n                                Refresh the page, and go into your browser developer tools and go into the cookie tab.\n                                In Chrome this is accessible with ctrl + shift + j, Application > Cookies and look for the cookie named\n                                jwt.\n                            </p>\n                            <Form>\n                                <Form.Group controlId=\"loginEmail\">\n                                    <Form.Label>Username</Form.Label>\n                                    <Form.Control type=\"text\" placeholder=\"Username\"\n                                    value={loginUsername}\n                                    onChange={(event) => setLoginUsername(event.target.value)} />\n                                </Form.Group>\n\n                                <Form.Group controlId=\"loginPassword\">\n                                    <Form.Label>Password</Form.Label>\n                                    <Form.Control type=\"password\" placeholder=\"Password\"\n                                    value={loginPassword}\n                                    onChange={(event) => setLoginPassword(event.target.value)} />\n                                </Form.Group>\n                                <Button variant=\"primary\" type=\"submit\"\n                                onClick={login}>\n                                    Login\n                                </Button>\n                                <Form.Group>\n                                    {loginMsg.show ? <label style={msgStyle}>{loginMsg.msg}</label> : null}\n                                </Form.Group>\n                            </Form>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col xs={12} className=\"mt-4 mb-4\">\n                            <h4>Secured Endpoint Access</h4>\n                            <p>\n                                If you're logged in, you will be able to make a request for this API endpoint.\n                                It should say \"Hello (username)\"\n                                Try logging out, and see what happens. Clicking logout button will simply mean deleting the cookie that contains the JWT.\n                            </p>\n                            \n                            {protectedRequestMsg.show && \n                            <React.Fragment>\n                                <h4>{protectedRequestMsg.msg}</h4>\n                            </React.Fragment>}\n\n                            <Button variant=\"success\" type=\"submit\"\n                            onClick={protectedRequest}>\n                                Make a Request\n                            </Button> <br/><br/>\n                            <Button variant=\"warning\" type=\"submit\"\n                            onClick={logout}>\n                                Logout\n                            </Button>\n                            \n                        </Col>\n                    </Row>\n                    \n                </Container>\n        </React.Fragment>\n    );\n}\n\nexport default Demo;","import React from 'react';\nimport {Container, Row, Col, Navbar, Nav} from 'react-bootstrap';\nimport Demo from './Demo/Demo';\n\nconst main = (props) => {\n    return (\n        <React.Fragment>\n            <Navbar bg=\"dark\" expand=\"md\" variant=\"dark\">\n                <Navbar.Brand href=\"/\"><i className=\"fas fa-angle-left\">&nbsp;Home</i></Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n\n            <Container>\n                <Row className=\"mt-4\">\n                    <Col xs={12} className=\"text-center\">\n                        <h1>JWT Authentication & Authorization</h1>\n                    </Col>\n                </Row>\n                <Row className=\"mt-4\">\n                    <Col xs={12}>\n                        <h2>Overview</h2>\n                    </Col>\n                    <Col xs={12}>\n                        <p>This project's purpose is to show the use of JSON Web Token (JWT) for authorization and authentication.</p>\n                    </Col>\n                    <Col xs={12} className=\"mt-2 mb-2\">\n                        <h4>Why JWT?</h4>\n                    </Col>\n                    <Col xs={12}>\n                        <h5>1. No server-side session storage</h5>\n                        <p>With traditional sessions, we will need a mechanism to store these sessions.\n                            Sessions are usually stored in a database or in-memory storage such as redis.\n                            <br/><br/>\n                            With database, the drawback is we would need to do a database query for every request.\n                            This will become a bottleneck and additional thing to maintain when the number of requests are high.\n                            <br/><br/>\n                            With in-memory storage, horizontal scaling will be an issue. We would need a huge memory for it to run properly.\n                        </p>\n                        <h5>2. Sharing token with multiple backends</h5>\n                        <p>\n                            As the token is stored in client side, authenticating in the server means authenticating the JWT only.\n                            If the JWT is valid, then we can proceed with whatever secure process that the user is trying to access.\n                            In comparison, sharing sessions across multiple backends will need careful orchestration in order for these\n                            different services to be able to access the session storage.\n                        </p>\n                        <h5>3. Less network request between services</h5>\n                        <p>\n                            Since every services can theoretically authenticate the JWT, there would be less communications needed\n                            between multiple services with the session service.\n                        </p>\n                    </Col>\n                    <Col xs={12} className=\"mt-2 mb-2\">\n                        <h4>Disadvantages of JWT</h4>\n                    </Col>\n                    <Col xs={12}>\n                        <h5>1. No session storage</h5>\n                        <p>\n                            This is both an advantage and disadvantage. The main disadvantage is we can't force a single user to logout.\n                            A workaround is by changing the secret key, but that would mean we would force all users to logout!\n                        </p>\n                        <h5>2. Unable to identify logged users</h5>\n                        <p>\n                            Since the \"session\" is stored in client side, we have no way of figuring out which users are currently logged.\n                        </p>\n                        <h5>3. Maximum cookie size</h5>\n                        <p>\n                            For a browser-based user, the JWT is stored as a cookie. Most browsers impose a maximum cookie size of 4kb.\n                            That means we might hit the data limit for information that could be stored in the JWT.\n                        </p>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs={12}>\n                        <p>Despite all the disadvantages, JWT is a good solution for <b>API \n                            endpoints</b> or <b>server-to-server</b> authorization and authentication.\n                        </p>\n                    </Col>\n                </Row>\n                \n            </Container>\n            <Demo />\n        </React.Fragment>\n    )\n}\n\nexport default main;","import React from 'react';\nimport Main from './containers/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}